lang en_US.UTF-8
keyboard us
timezone UTC
text
reboot

# Configure network to use DHCP and activate on boot
network --bootproto=dhcp --device=link --activate --onboot=on --hostname=REPLACE_HOST_NAME

# Partition disk with a 1GB boot XFS partition and an LVM volume containing a 10GB+ system root
# The remainder of the volume will be used by the CSI driver for storing data
#
# For example, a 20GB disk would be partitioned in the following way:
#
# NAME          MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
# sda             8:0    0  20G  0 disk
# ├─sda1          8:1    0 200M  0 part /boot/efi
# ├─sda1          8:1    0 800M  0 part /boot
# └─sda2          8:2    0  19G  0 part
#  └─rhel-root  253:0    0  10G  0 lvm  /sysroot
#
zerombr
clearpart --all --initlabel
part /boot/efi --fstype=efi --size=200
part /boot --fstype=xfs --asprimary --size=800
# Uncomment this line to add a SWAP partition of the recommended size
#part swap --fstype=swap --recommended
part pv.01 --grow
volgroup rhel pv.01
logvol / --vgname=rhel --fstype=xfs --size=REPLACE_LVM_SYSROOT_SIZE --name=root
logvol none --thinpool --size=REPLACE_LVM_THINPOOL_SIZE --fstype=None --name=ushift-thin --vgname=rhel

# Lock root user account
rootpw --lock

# Configure ostree
ostreesetup --nogpg --osname=rhel --remote=edge --url=REPLACE_OSTREE_SERVER_URL --ref=REPLACE_BOOT_COMMIT_REF

%post --log=/var/log/anaconda/post-install.log --erroronfail

# Set the configuration of MicroShift to include subjectAltNames
cat - >/etc/microshift/config.yaml <<EOF
apiServer:
  subjectAltNames:
    - $(ip route | grep default | awk '{print $9}')
EOF
if [ -n "REPLACE_PUBLIC_IP" ]; then
    echo "    - REPLACE_PUBLIC_IP" >>/etc/microshift/config.yaml
fi

# Set the /etc/microshift/lvmd.yaml file to expose the LVM configuration
cat - >/etc/microshift/lvmd.yaml <<EOF
device-classes:
- default: true
  name: default
  volume-group: rhel
  spare-gb: 0
- name: thin
  thin-pool:
    name: ushift-thin
    overprovision-ratio: 10
  type: thin
  volume-group: rhel
  spare-gb: 0
EOF

# Deploy a storageClass to enable provisioning on the thin-pool
cat - >/etc/microshift/manifests/thin-sc.yaml <<EOF
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: thin
parameters:
  csi.storage.k8s.io/fstype: xfs
  "topolvm.io/device-class": "ushift-thin"
provisioner: topolvm.io
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: true
EOF

# Update the ostree server URL
ostree remote delete edge
ostree remote add --no-gpg-verify edge REPLACE_OSTREE_SERVER_URL

# The pull secret is mandatory for MicroShift builds on top of OpenShift, but not OKD
# The /etc/crio/crio.conf.d/microshift.conf references the /etc/crio/openshift-pull-secret file
cat > /etc/crio/openshift-pull-secret <<EOF
REPLACE_PULL_SECRET
EOF
chmod 600 /etc/crio/openshift-pull-secret

# Create a default redhat user, allowing it to run sudo commands without password
useradd -m -d /home/redhat -p \$5\$XDVQ6DxT8S5YWLV7\$8f2om5JfjK56v9ofUkUAwZXTxJl3Sqnc9yPnza4xoJ0 redhat
echo -e 'redhat\tALL=(ALL)\tNOPASSWD: ALL' > /etc/sudoers.d/microshift

# # Add authorized ssh keys
mkdir -m 700 /home/redhat/.ssh
cat >> /home/redhat/.ssh/authorized_keys <<EOF
REPLACE_REDHAT_AUTHORIZED_KEYS
EOF
chmod 600 /home/redhat/.ssh/authorized_keys

# Make sure redhat user directory contents ownership is correct
chown -R redhat:redhat /home/redhat/

# Configure the firewall (rules reload is not necessary here)
firewall-offline-cmd --zone=trusted --add-source=10.42.0.0/16
firewall-offline-cmd --zone=trusted --add-source=169.254.169.1

# Make the KUBECONFIG from MicroShift directly available for the root user
echo -e 'export KUBECONFIG=/var/lib/microshift/resources/kubeadmin/kubeconfig' >> /root/.profile

# Configure systemd journal service to persist logs between boots and limit their size to 1G
sudo mkdir -p /etc/systemd/journald.conf.d
cat > /etc/systemd/journald.conf.d/microshift.conf <<EOF
[Journal]
Storage=persistent
SystemMaxUse=1G
RuntimeMaxUse=1G
EOF

# Make sure all the Ethernet network interfaces are connected automatically
for uuid in $(nmcli -f uuid,type,autoconnect connection | awk '$2 == "ethernet" && $3 == "no" {print $1}') ; do
    # Remove autoconnect option from the configuration file to keep it enabled after reboot
    file=$(nmcli -f uuid,filename connection | awk -v uuid=${uuid} '$1 == uuid' | sed "s/${uuid}//g" | xargs)
    sed -i '/autoconnect=.*/d' "${file}"
done

%end