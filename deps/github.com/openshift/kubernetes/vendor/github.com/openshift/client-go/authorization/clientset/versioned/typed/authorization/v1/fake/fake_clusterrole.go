// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/openshift/api/authorization/v1"
	authorizationv1 "github.com/openshift/client-go/authorization/applyconfigurations/authorization/v1"
	typedauthorizationv1 "github.com/openshift/client-go/authorization/clientset/versioned/typed/authorization/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeClusterRoles implements ClusterRoleInterface
type fakeClusterRoles struct {
	*gentype.FakeClientWithListAndApply[*v1.ClusterRole, *v1.ClusterRoleList, *authorizationv1.ClusterRoleApplyConfiguration]
	Fake *FakeAuthorizationV1
}

func newFakeClusterRoles(fake *FakeAuthorizationV1) typedauthorizationv1.ClusterRoleInterface {
	return &fakeClusterRoles{
		gentype.NewFakeClientWithListAndApply[*v1.ClusterRole, *v1.ClusterRoleList, *authorizationv1.ClusterRoleApplyConfiguration](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("clusterroles"),
			v1.SchemeGroupVersion.WithKind("ClusterRole"),
			func() *v1.ClusterRole { return &v1.ClusterRole{} },
			func() *v1.ClusterRoleList { return &v1.ClusterRoleList{} },
			func(dst, src *v1.ClusterRoleList) { dst.ListMeta = src.ListMeta },
			func(list *v1.ClusterRoleList) []*v1.ClusterRole { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.ClusterRoleList, items []*v1.ClusterRole) { list.Items = gentype.FromPointerSlice(items) },
		),
		fake,
	}
}
