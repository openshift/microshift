// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	context "context"

	v1 "github.com/openshift/api/authorization/v1"
	authorizationv1 "github.com/openshift/client-go/authorization/clientset/versioned/typed/authorization/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	gentype "k8s.io/client-go/gentype"
	testing "k8s.io/client-go/testing"
)

// fakeResourceAccessReviews implements ResourceAccessReviewInterface
type fakeResourceAccessReviews struct {
	*gentype.FakeClient[*v1.ResourceAccessReview]
	Fake *FakeAuthorizationV1
}

func newFakeResourceAccessReviews(fake *FakeAuthorizationV1) authorizationv1.ResourceAccessReviewInterface {
	return &fakeResourceAccessReviews{
		gentype.NewFakeClient[*v1.ResourceAccessReview](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("resourceaccessreviews"),
			v1.SchemeGroupVersion.WithKind("ResourceAccessReview"),
			func() *v1.ResourceAccessReview { return &v1.ResourceAccessReview{} },
		),
		fake,
	}
}

// Create takes the representation of a resourceAccessReview and creates it.  Returns the server's representation of the resourceAccessReviewResponse, and an error, if there is any.
func (c *fakeResourceAccessReviews) Create(ctx context.Context, resourceAccessReview *v1.ResourceAccessReview, opts metav1.CreateOptions) (result *v1.ResourceAccessReviewResponse, err error) {
	emptyResult := &v1.ResourceAccessReviewResponse{}
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateActionWithOptions(c.Resource(), resourceAccessReview, opts), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.ResourceAccessReviewResponse), err
}
