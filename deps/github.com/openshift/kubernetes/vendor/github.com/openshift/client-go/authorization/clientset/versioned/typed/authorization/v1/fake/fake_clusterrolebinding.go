// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/openshift/api/authorization/v1"
	authorizationv1 "github.com/openshift/client-go/authorization/applyconfigurations/authorization/v1"
	typedauthorizationv1 "github.com/openshift/client-go/authorization/clientset/versioned/typed/authorization/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeClusterRoleBindings implements ClusterRoleBindingInterface
type fakeClusterRoleBindings struct {
	*gentype.FakeClientWithListAndApply[*v1.ClusterRoleBinding, *v1.ClusterRoleBindingList, *authorizationv1.ClusterRoleBindingApplyConfiguration]
	Fake *FakeAuthorizationV1
}

func newFakeClusterRoleBindings(fake *FakeAuthorizationV1) typedauthorizationv1.ClusterRoleBindingInterface {
	return &fakeClusterRoleBindings{
		gentype.NewFakeClientWithListAndApply[*v1.ClusterRoleBinding, *v1.ClusterRoleBindingList, *authorizationv1.ClusterRoleBindingApplyConfiguration](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("clusterrolebindings"),
			v1.SchemeGroupVersion.WithKind("ClusterRoleBinding"),
			func() *v1.ClusterRoleBinding { return &v1.ClusterRoleBinding{} },
			func() *v1.ClusterRoleBindingList { return &v1.ClusterRoleBindingList{} },
			func(dst, src *v1.ClusterRoleBindingList) { dst.ListMeta = src.ListMeta },
			func(list *v1.ClusterRoleBindingList) []*v1.ClusterRoleBinding {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1.ClusterRoleBindingList, items []*v1.ClusterRoleBinding) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
