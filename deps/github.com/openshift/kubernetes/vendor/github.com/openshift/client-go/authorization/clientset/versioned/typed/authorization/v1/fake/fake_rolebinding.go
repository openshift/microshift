// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/openshift/api/authorization/v1"
	authorizationv1 "github.com/openshift/client-go/authorization/applyconfigurations/authorization/v1"
	typedauthorizationv1 "github.com/openshift/client-go/authorization/clientset/versioned/typed/authorization/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeRoleBindings implements RoleBindingInterface
type fakeRoleBindings struct {
	*gentype.FakeClientWithListAndApply[*v1.RoleBinding, *v1.RoleBindingList, *authorizationv1.RoleBindingApplyConfiguration]
	Fake *FakeAuthorizationV1
}

func newFakeRoleBindings(fake *FakeAuthorizationV1, namespace string) typedauthorizationv1.RoleBindingInterface {
	return &fakeRoleBindings{
		gentype.NewFakeClientWithListAndApply[*v1.RoleBinding, *v1.RoleBindingList, *authorizationv1.RoleBindingApplyConfiguration](
			fake.Fake,
			namespace,
			v1.SchemeGroupVersion.WithResource("rolebindings"),
			v1.SchemeGroupVersion.WithKind("RoleBinding"),
			func() *v1.RoleBinding { return &v1.RoleBinding{} },
			func() *v1.RoleBindingList { return &v1.RoleBindingList{} },
			func(dst, src *v1.RoleBindingList) { dst.ListMeta = src.ListMeta },
			func(list *v1.RoleBindingList) []*v1.RoleBinding { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.RoleBindingList, items []*v1.RoleBinding) { list.Items = gentype.FromPointerSlice(items) },
		),
		fake,
	}
}
