// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/openshift/api/authorization/v1"
	authorizationv1 "github.com/openshift/client-go/authorization/applyconfigurations/authorization/v1"
	typedauthorizationv1 "github.com/openshift/client-go/authorization/clientset/versioned/typed/authorization/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeRoleBindingRestrictions implements RoleBindingRestrictionInterface
type fakeRoleBindingRestrictions struct {
	*gentype.FakeClientWithListAndApply[*v1.RoleBindingRestriction, *v1.RoleBindingRestrictionList, *authorizationv1.RoleBindingRestrictionApplyConfiguration]
	Fake *FakeAuthorizationV1
}

func newFakeRoleBindingRestrictions(fake *FakeAuthorizationV1, namespace string) typedauthorizationv1.RoleBindingRestrictionInterface {
	return &fakeRoleBindingRestrictions{
		gentype.NewFakeClientWithListAndApply[*v1.RoleBindingRestriction, *v1.RoleBindingRestrictionList, *authorizationv1.RoleBindingRestrictionApplyConfiguration](
			fake.Fake,
			namespace,
			v1.SchemeGroupVersion.WithResource("rolebindingrestrictions"),
			v1.SchemeGroupVersion.WithKind("RoleBindingRestriction"),
			func() *v1.RoleBindingRestriction { return &v1.RoleBindingRestriction{} },
			func() *v1.RoleBindingRestrictionList { return &v1.RoleBindingRestrictionList{} },
			func(dst, src *v1.RoleBindingRestrictionList) { dst.ListMeta = src.ListMeta },
			func(list *v1.RoleBindingRestrictionList) []*v1.RoleBindingRestriction {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1.RoleBindingRestrictionList, items []*v1.RoleBindingRestriction) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
