// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/openshift/api/apiserver/v1"
	apiserverv1 "github.com/openshift/client-go/apiserver/applyconfigurations/apiserver/v1"
	typedapiserverv1 "github.com/openshift/client-go/apiserver/clientset/versioned/typed/apiserver/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeAPIRequestCounts implements APIRequestCountInterface
type fakeAPIRequestCounts struct {
	*gentype.FakeClientWithListAndApply[*v1.APIRequestCount, *v1.APIRequestCountList, *apiserverv1.APIRequestCountApplyConfiguration]
	Fake *FakeApiserverV1
}

func newFakeAPIRequestCounts(fake *FakeApiserverV1) typedapiserverv1.APIRequestCountInterface {
	return &fakeAPIRequestCounts{
		gentype.NewFakeClientWithListAndApply[*v1.APIRequestCount, *v1.APIRequestCountList, *apiserverv1.APIRequestCountApplyConfiguration](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("apirequestcounts"),
			v1.SchemeGroupVersion.WithKind("APIRequestCount"),
			func() *v1.APIRequestCount { return &v1.APIRequestCount{} },
			func() *v1.APIRequestCountList { return &v1.APIRequestCountList{} },
			func(dst, src *v1.APIRequestCountList) { dst.ListMeta = src.ListMeta },
			func(list *v1.APIRequestCountList) []*v1.APIRequestCount { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.APIRequestCountList, items []*v1.APIRequestCount) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
