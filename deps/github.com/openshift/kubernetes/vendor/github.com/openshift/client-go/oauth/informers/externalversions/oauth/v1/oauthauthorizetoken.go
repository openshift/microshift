// Code generated by informer-gen. DO NOT EDIT.

package v1

import (
	context "context"
	time "time"

	apioauthv1 "github.com/openshift/api/oauth/v1"
	versioned "github.com/openshift/client-go/oauth/clientset/versioned"
	internalinterfaces "github.com/openshift/client-go/oauth/informers/externalversions/internalinterfaces"
	oauthv1 "github.com/openshift/client-go/oauth/listers/oauth/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// OAuthAuthorizeTokenInformer provides access to a shared informer and lister for
// OAuthAuthorizeTokens.
type OAuthAuthorizeTokenInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() oauthv1.OAuthAuthorizeTokenLister
}

type oAuthAuthorizeTokenInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewOAuthAuthorizeTokenInformer constructs a new informer for OAuthAuthorizeToken type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewOAuthAuthorizeTokenInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredOAuthAuthorizeTokenInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredOAuthAuthorizeTokenInformer constructs a new informer for OAuthAuthorizeToken type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredOAuthAuthorizeTokenInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.OauthV1().OAuthAuthorizeTokens().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.OauthV1().OAuthAuthorizeTokens().Watch(context.TODO(), options)
			},
		},
		&apioauthv1.OAuthAuthorizeToken{},
		resyncPeriod,
		indexers,
	)
}

func (f *oAuthAuthorizeTokenInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredOAuthAuthorizeTokenInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *oAuthAuthorizeTokenInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&apioauthv1.OAuthAuthorizeToken{}, f.defaultInformer)
}

func (f *oAuthAuthorizeTokenInformer) Lister() oauthv1.OAuthAuthorizeTokenLister {
	return oauthv1.NewOAuthAuthorizeTokenLister(f.Informer().GetIndexer())
}
