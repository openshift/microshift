{
  "type": "object",
  "required": [
    "apiServer",
    "debugging",
    "dns",
    "etcd",
    "ingress",
    "manifests",
    "network",
    "node"
  ],
  "properties": {
    "apiServer": {
      "type": "object",
      "required": [
        "auditLog",
        "namedCertificates",
        "subjectAltNames"
      ],
      "properties": {
        "advertiseAddress": {
          "description": "Kube apiserver advertise address to work around the certificates issue when requiring external access using the node IP. This will turn into the IP configured in the endpoint slice for kubernetes service. Must be a reachable IP from pods. Defaults to service network CIDR first address.",
          "type": "string"
        },
        "auditLog": {
          "type": "object",
          "required": [
            "maxFileAge",
            "maxFileSize",
            "maxFiles",
            "profile"
          ],
          "properties": {
            "maxFileAge": {
              "description": "maxFileAge is the maximum number of days to retain old audit log files",
              "type": "integer",
              "default": 10
            },
            "maxFileSize": {
              "description": "maxFileSize is the maximum size in megabytes of the audit log file before it gets rotated",
              "type": "integer",
              "default": 200
            },
            "maxFiles": {
              "description": "maxFiles is the maximum number of rotated audit log files to retain",
              "type": "integer",
              "default": 10
            },
            "profile": {
              "description": "profile is the OpenShift profile specifying a specific logging policy",
              "type": "string",
              "default": "Default"
            }
          }
        },
        "namedCertificates": {
          "description": "List of custom certificates used to secure requests to specific host names",
          "type": "array",
          "items": {
            "description": "NamedCertificateEntry provides certificate details",
            "type": "object",
            "required": [
              "certPath",
              "keyPath",
              "names"
            ],
            "properties": {
              "certPath": {
                "type": "string"
              },
              "keyPath": {
                "type": "string"
              },
              "names": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "subjectAltNames": {
          "description": "SubjectAltNames added to API server certs",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "debugging": {
      "type": "object",
      "required": [
        "logLevel"
      ],
      "properties": {
        "logLevel": {
          "description": "Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
          "type": "string",
          "default": "Normal"
        }
      }
    },
    "dns": {
      "type": "object",
      "required": [
        "baseDomain"
      ],
      "properties": {
        "baseDomain": {
          "description": "baseDomain is the base domain of the cluster. All managed DNS records will be sub-domains of this base. \n For example, given the base domain `example.com`, router exposed domains will be formed as `*.apps.example.com` by default, and API service will have a DNS entry for `api.example.com`, as well as \"api-int.example.com\" for internal k8s API access. \n Once set, this field cannot be changed.",
          "type": "string",
          "default": "example.com",
          "example": "microshift.example.com"
        }
      }
    },
    "etcd": {
      "type": "object",
      "required": [
        "memoryLimitMB"
      ],
      "properties": {
        "memoryLimitMB": {
          "description": "Set a memory limit on the etcd process; etcd will begin paging memory when it gets to this value. 0 means no limit.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ingress": {
      "type": "object",
      "required": [
        "listenAddress",
        "ports",
        "routeAdmissionPolicy",
        "status"
      ],
      "properties": {
        "listenAddress": {
          "description": "List of IP addresses and NIC names where the router will be listening. The NIC names get translated to all their configured IPs dynamically. Defaults to the configured IPs in the host at MicroShift start.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ports": {
          "type": "object",
          "required": [
            "http",
            "https"
          ],
          "properties": {
            "http": {
              "description": "Default router http port. Must be in range 1-65535.",
              "type": "integer",
              "default": 80
            },
            "https": {
              "description": "Default router https port. Must be in range 1-65535.",
              "type": "integer",
              "default": 443
            }
          }
        },
        "routeAdmissionPolicy": {
          "type": "object",
          "required": [
            "namespaceOwnership"
          ],
          "properties": {
            "namespaceOwnership": {
              "description": "Describes how host name claims across namespaces should be handled. \n Value must be one of: \n - Strict: Do not allow routes in different namespaces to claim the same host. \n - InterNamespaceAllowed: Allow routes to claim different paths of the same host name across namespaces. \n If empty, the default is InterNamespaceAllowed.",
              "type": "string",
              "default": "InterNamespaceAllowed"
            }
          }
        },
        "status": {
          "description": "Default router status, can be Managed or Removed.",
          "type": "string",
          "default": "Managed"
        }
      }
    },
    "manifests": {
      "type": "object",
      "required": [
        "kustomizePaths"
      ],
      "properties": {
        "kustomizePaths": {
          "description": "The locations on the filesystem to scan for kustomization files to use to load manifests. Set to a list of paths to scan only those paths. Set to an empty list to disable loading manifests. The entries in the list can be glob patterns to match multiple subdirectories.",
          "type": "array",
          "default": [
            "/usr/lib/microshift/manifests",
            "/usr/lib/microshift/manifests.d/*",
            "/etc/microshift/manifests",
            "/etc/microshift/manifests.d/*"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "network": {
      "type": "object",
      "required": [
        "clusterNetwork",
        "serviceNetwork",
        "serviceNodePortRange"
      ],
      "properties": {
        "clusterNetwork": {
          "description": "IP address pool to use for pod IPs. This field is immutable after installation.",
          "type": "array",
          "default": [
            "10.42.0.0/16"
          ],
          "items": {
            "type": "string"
          }
        },
        "serviceNetwork": {
          "description": "IP address pool for services. Currently, we only support a single entry here. This field is immutable after installation.",
          "type": "array",
          "default": [
            "10.43.0.0/16"
          ],
          "items": {
            "type": "string"
          }
        },
        "serviceNodePortRange": {
          "description": "The port range allowed for Services of type NodePort. If not specified, the default of 30000-32767 will be used. Such Services without a NodePort specified will have one automatically allocated from this range. This parameter can be updated after the cluster is installed.",
          "type": "string",
          "default": "30000-32767",
          "pattern": "^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])-([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$"
        }
      }
    },
    "node": {
      "type": "object",
      "required": [
        "hostnameOverride",
        "nodeIP"
      ],
      "properties": {
        "hostnameOverride": {
          "description": "If non-empty, will use this string to identify the node instead of the hostname",
          "type": "string"
        },
        "nodeIP": {
          "description": "IP address of the node, passed to the kubelet. If not specified, kubelet will use the node's default IP address.",
          "type": "string"
        }
      }
    }
  }
}