//go:build !ignore_autogenerated_openshift
// +build !ignore_autogenerated_openshift

// Code generated by conversion-gen. DO NOT EDIT.

package v1

import (
	unsafe "unsafe"

	requestlimit "github.com/openshift/openshift-apiserver/pkg/project/apiserver/admission/apis/requestlimit"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*ProjectLimitBySelector)(nil), (*requestlimit.ProjectLimitBySelector)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_ProjectLimitBySelector_To_requestlimit_ProjectLimitBySelector(a.(*ProjectLimitBySelector), b.(*requestlimit.ProjectLimitBySelector), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*requestlimit.ProjectLimitBySelector)(nil), (*ProjectLimitBySelector)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_requestlimit_ProjectLimitBySelector_To_v1_ProjectLimitBySelector(a.(*requestlimit.ProjectLimitBySelector), b.(*ProjectLimitBySelector), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ProjectRequestLimitConfig)(nil), (*requestlimit.ProjectRequestLimitConfig)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_ProjectRequestLimitConfig_To_requestlimit_ProjectRequestLimitConfig(a.(*ProjectRequestLimitConfig), b.(*requestlimit.ProjectRequestLimitConfig), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*requestlimit.ProjectRequestLimitConfig)(nil), (*ProjectRequestLimitConfig)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_requestlimit_ProjectRequestLimitConfig_To_v1_ProjectRequestLimitConfig(a.(*requestlimit.ProjectRequestLimitConfig), b.(*ProjectRequestLimitConfig), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1_ProjectLimitBySelector_To_requestlimit_ProjectLimitBySelector(in *ProjectLimitBySelector, out *requestlimit.ProjectLimitBySelector, s conversion.Scope) error {
	out.Selector = *(*map[string]string)(unsafe.Pointer(&in.Selector))
	out.MaxProjects = (*int)(unsafe.Pointer(in.MaxProjects))
	return nil
}

// Convert_v1_ProjectLimitBySelector_To_requestlimit_ProjectLimitBySelector is an autogenerated conversion function.
func Convert_v1_ProjectLimitBySelector_To_requestlimit_ProjectLimitBySelector(in *ProjectLimitBySelector, out *requestlimit.ProjectLimitBySelector, s conversion.Scope) error {
	return autoConvert_v1_ProjectLimitBySelector_To_requestlimit_ProjectLimitBySelector(in, out, s)
}

func autoConvert_requestlimit_ProjectLimitBySelector_To_v1_ProjectLimitBySelector(in *requestlimit.ProjectLimitBySelector, out *ProjectLimitBySelector, s conversion.Scope) error {
	out.Selector = *(*map[string]string)(unsafe.Pointer(&in.Selector))
	out.MaxProjects = (*int)(unsafe.Pointer(in.MaxProjects))
	return nil
}

// Convert_requestlimit_ProjectLimitBySelector_To_v1_ProjectLimitBySelector is an autogenerated conversion function.
func Convert_requestlimit_ProjectLimitBySelector_To_v1_ProjectLimitBySelector(in *requestlimit.ProjectLimitBySelector, out *ProjectLimitBySelector, s conversion.Scope) error {
	return autoConvert_requestlimit_ProjectLimitBySelector_To_v1_ProjectLimitBySelector(in, out, s)
}

func autoConvert_v1_ProjectRequestLimitConfig_To_requestlimit_ProjectRequestLimitConfig(in *ProjectRequestLimitConfig, out *requestlimit.ProjectRequestLimitConfig, s conversion.Scope) error {
	out.Limits = *(*[]requestlimit.ProjectLimitBySelector)(unsafe.Pointer(&in.Limits))
	out.MaxProjectsForSystemUsers = (*int)(unsafe.Pointer(in.MaxProjectsForSystemUsers))
	out.MaxProjectsForServiceAccounts = (*int)(unsafe.Pointer(in.MaxProjectsForServiceAccounts))
	return nil
}

// Convert_v1_ProjectRequestLimitConfig_To_requestlimit_ProjectRequestLimitConfig is an autogenerated conversion function.
func Convert_v1_ProjectRequestLimitConfig_To_requestlimit_ProjectRequestLimitConfig(in *ProjectRequestLimitConfig, out *requestlimit.ProjectRequestLimitConfig, s conversion.Scope) error {
	return autoConvert_v1_ProjectRequestLimitConfig_To_requestlimit_ProjectRequestLimitConfig(in, out, s)
}

func autoConvert_requestlimit_ProjectRequestLimitConfig_To_v1_ProjectRequestLimitConfig(in *requestlimit.ProjectRequestLimitConfig, out *ProjectRequestLimitConfig, s conversion.Scope) error {
	out.Limits = *(*[]ProjectLimitBySelector)(unsafe.Pointer(&in.Limits))
	out.MaxProjectsForSystemUsers = (*int)(unsafe.Pointer(in.MaxProjectsForSystemUsers))
	out.MaxProjectsForServiceAccounts = (*int)(unsafe.Pointer(in.MaxProjectsForServiceAccounts))
	return nil
}

// Convert_requestlimit_ProjectRequestLimitConfig_To_v1_ProjectRequestLimitConfig is an autogenerated conversion function.
func Convert_requestlimit_ProjectRequestLimitConfig_To_v1_ProjectRequestLimitConfig(in *requestlimit.ProjectRequestLimitConfig, out *ProjectRequestLimitConfig, s conversion.Scope) error {
	return autoConvert_requestlimit_ProjectRequestLimitConfig_To_v1_ProjectRequestLimitConfig(in, out, s)
}
