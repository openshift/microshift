// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openshift/api/network/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// DNSNameResolverResolvedNameApplyConfiguration represents an declarative configuration of the DNSNameResolverResolvedName type for use
// with apply.
type DNSNameResolverResolvedNameApplyConfiguration struct {
	Conditions         []v1.Condition                                     `json:"conditions,omitempty"`
	DNSName            *v1alpha1.DNSName                                  `json:"dnsName,omitempty"`
	ResolvedAddresses  []DNSNameResolverResolvedAddressApplyConfiguration `json:"resolvedAddresses,omitempty"`
	ResolutionFailures *int32                                             `json:"resolutionFailures,omitempty"`
}

// DNSNameResolverResolvedNameApplyConfiguration constructs an declarative configuration of the DNSNameResolverResolvedName type for use with
// apply.
func DNSNameResolverResolvedName() *DNSNameResolverResolvedNameApplyConfiguration {
	return &DNSNameResolverResolvedNameApplyConfiguration{}
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *DNSNameResolverResolvedNameApplyConfiguration) WithConditions(values ...v1.Condition) *DNSNameResolverResolvedNameApplyConfiguration {
	for i := range values {
		b.Conditions = append(b.Conditions, values[i])
	}
	return b
}

// WithDNSName sets the DNSName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DNSName field is set to the value of the last call.
func (b *DNSNameResolverResolvedNameApplyConfiguration) WithDNSName(value v1alpha1.DNSName) *DNSNameResolverResolvedNameApplyConfiguration {
	b.DNSName = &value
	return b
}

// WithResolvedAddresses adds the given value to the ResolvedAddresses field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ResolvedAddresses field.
func (b *DNSNameResolverResolvedNameApplyConfiguration) WithResolvedAddresses(values ...*DNSNameResolverResolvedAddressApplyConfiguration) *DNSNameResolverResolvedNameApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithResolvedAddresses")
		}
		b.ResolvedAddresses = append(b.ResolvedAddresses, *values[i])
	}
	return b
}

// WithResolutionFailures sets the ResolutionFailures field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ResolutionFailures field is set to the value of the last call.
func (b *DNSNameResolverResolvedNameApplyConfiguration) WithResolutionFailures(value int32) *DNSNameResolverResolvedNameApplyConfiguration {
	b.ResolutionFailures = &value
	return b
}
