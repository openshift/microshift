// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	apiauthorizationv1 "github.com/openshift/api/authorization/v1"
	internal "github.com/openshift/client-go/authorization/applyconfigurations/internal"
	runtime "k8s.io/apimachinery/pkg/runtime"
	managedfields "k8s.io/apimachinery/pkg/util/managedfields"
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// LocalSubjectAccessReviewApplyConfiguration represents an declarative configuration of the LocalSubjectAccessReview type for use
// with apply.
type LocalSubjectAccessReviewApplyConfiguration struct {
	v1.TypeMetaApplyConfiguration `json:",inline"`
	ActionApplyConfiguration      `json:",inline"`
	User                          *string                            `json:"user,omitempty"`
	GroupsSlice                   []string                           `json:"groups,omitempty"`
	Scopes                        *apiauthorizationv1.OptionalScopes `json:"scopes,omitempty"`
}

// LocalSubjectAccessReview constructs an declarative configuration of the LocalSubjectAccessReview type for use with
// apply.
func LocalSubjectAccessReview(name string) *LocalSubjectAccessReviewApplyConfiguration {
	b := &LocalSubjectAccessReviewApplyConfiguration{}
	b.WithKind("LocalSubjectAccessReview")
	b.WithAPIVersion("authorization.openshift.io/v1")
	return b
}

// ExtractLocalSubjectAccessReview extracts the applied configuration owned by fieldManager from
// localSubjectAccessReview. If no managedFields are found in localSubjectAccessReview for fieldManager, a
// LocalSubjectAccessReviewApplyConfiguration is returned with only the Name, Namespace (if applicable),
// APIVersion and Kind populated. It is possible that no managed fields were found for because other
// field managers have taken ownership of all the fields previously owned by fieldManager, or because
// the fieldManager never owned fields any fields.
// localSubjectAccessReview must be a unmodified LocalSubjectAccessReview API object that was retrieved from the Kubernetes API.
// ExtractLocalSubjectAccessReview provides a way to perform a extract/modify-in-place/apply workflow.
// Note that an extracted apply configuration will contain fewer fields than what the fieldManager previously
// applied if another fieldManager has updated or force applied any of the previously applied fields.
// Experimental!
func ExtractLocalSubjectAccessReview(localSubjectAccessReview *apiauthorizationv1.LocalSubjectAccessReview, fieldManager string) (*LocalSubjectAccessReviewApplyConfiguration, error) {
	return extractLocalSubjectAccessReview(localSubjectAccessReview, fieldManager, "")
}

// ExtractLocalSubjectAccessReviewStatus is the same as ExtractLocalSubjectAccessReview except
// that it extracts the status subresource applied configuration.
// Experimental!
func ExtractLocalSubjectAccessReviewStatus(localSubjectAccessReview *apiauthorizationv1.LocalSubjectAccessReview, fieldManager string) (*LocalSubjectAccessReviewApplyConfiguration, error) {
	return extractLocalSubjectAccessReview(localSubjectAccessReview, fieldManager, "status")
}

func extractLocalSubjectAccessReview(localSubjectAccessReview *apiauthorizationv1.LocalSubjectAccessReview, fieldManager string, subresource string) (*LocalSubjectAccessReviewApplyConfiguration, error) {
	b := &LocalSubjectAccessReviewApplyConfiguration{}
	err := managedfields.ExtractInto(localSubjectAccessReview, internal.Parser().Type("com.github.openshift.api.authorization.v1.LocalSubjectAccessReview"), fieldManager, b, subresource)
	if err != nil {
		return nil, err
	}

	b.WithKind("LocalSubjectAccessReview")
	b.WithAPIVersion("authorization.openshift.io/v1")
	return b, nil
}

// WithKind sets the Kind field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Kind field is set to the value of the last call.
func (b *LocalSubjectAccessReviewApplyConfiguration) WithKind(value string) *LocalSubjectAccessReviewApplyConfiguration {
	b.Kind = &value
	return b
}

// WithAPIVersion sets the APIVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the APIVersion field is set to the value of the last call.
func (b *LocalSubjectAccessReviewApplyConfiguration) WithAPIVersion(value string) *LocalSubjectAccessReviewApplyConfiguration {
	b.APIVersion = &value
	return b
}

// WithNamespace sets the Namespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Namespace field is set to the value of the last call.
func (b *LocalSubjectAccessReviewApplyConfiguration) WithNamespace(value string) *LocalSubjectAccessReviewApplyConfiguration {
	b.Namespace = &value
	return b
}

// WithVerb sets the Verb field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Verb field is set to the value of the last call.
func (b *LocalSubjectAccessReviewApplyConfiguration) WithVerb(value string) *LocalSubjectAccessReviewApplyConfiguration {
	b.Verb = &value
	return b
}

// WithGroup sets the Group field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Group field is set to the value of the last call.
func (b *LocalSubjectAccessReviewApplyConfiguration) WithGroup(value string) *LocalSubjectAccessReviewApplyConfiguration {
	b.Group = &value
	return b
}

// WithVersion sets the Version field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Version field is set to the value of the last call.
func (b *LocalSubjectAccessReviewApplyConfiguration) WithVersion(value string) *LocalSubjectAccessReviewApplyConfiguration {
	b.Version = &value
	return b
}

// WithResource sets the Resource field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resource field is set to the value of the last call.
func (b *LocalSubjectAccessReviewApplyConfiguration) WithResource(value string) *LocalSubjectAccessReviewApplyConfiguration {
	b.Resource = &value
	return b
}

// WithResourceName sets the ResourceName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ResourceName field is set to the value of the last call.
func (b *LocalSubjectAccessReviewApplyConfiguration) WithResourceName(value string) *LocalSubjectAccessReviewApplyConfiguration {
	b.ResourceName = &value
	return b
}

// WithPath sets the Path field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Path field is set to the value of the last call.
func (b *LocalSubjectAccessReviewApplyConfiguration) WithPath(value string) *LocalSubjectAccessReviewApplyConfiguration {
	b.Path = &value
	return b
}

// WithIsNonResourceURL sets the IsNonResourceURL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IsNonResourceURL field is set to the value of the last call.
func (b *LocalSubjectAccessReviewApplyConfiguration) WithIsNonResourceURL(value bool) *LocalSubjectAccessReviewApplyConfiguration {
	b.IsNonResourceURL = &value
	return b
}

// WithContent sets the Content field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Content field is set to the value of the last call.
func (b *LocalSubjectAccessReviewApplyConfiguration) WithContent(value runtime.RawExtension) *LocalSubjectAccessReviewApplyConfiguration {
	b.Content = &value
	return b
}

// WithUser sets the User field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the User field is set to the value of the last call.
func (b *LocalSubjectAccessReviewApplyConfiguration) WithUser(value string) *LocalSubjectAccessReviewApplyConfiguration {
	b.User = &value
	return b
}

// WithGroupsSlice adds the given value to the GroupsSlice field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the GroupsSlice field.
func (b *LocalSubjectAccessReviewApplyConfiguration) WithGroupsSlice(values ...string) *LocalSubjectAccessReviewApplyConfiguration {
	for i := range values {
		b.GroupsSlice = append(b.GroupsSlice, values[i])
	}
	return b
}

// WithScopes sets the Scopes field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Scopes field is set to the value of the last call.
func (b *LocalSubjectAccessReviewApplyConfiguration) WithScopes(value apiauthorizationv1.OptionalScopes) *LocalSubjectAccessReviewApplyConfiguration {
	b.Scopes = &value
	return b
}
