apiServer:
    # Kube apiserver advertise address to work around the certificates issue
    # when requiring external access using the node IP. This will turn into
    # the IP configured in the endpoint slice for kubernetes service. Must be
    # a reachable IP from pods. Defaults to service network CIDR first
    # address.
    advertiseAddress: ""
    auditLog:
        # maxFileAge is the maximum number of days to retain old audit log files
        maxFileAge: 0
        # maxFileSize is the maximum size in megabytes of the audit log file before it gets rotated
        maxFileSize: 200
        # maxFiles is the maximum number of rotated audit log files to retain
        maxFiles: 10
        # profile is the OpenShift profile specifying a specific logging policy
        profile: Default
    # List of custom certificates used to secure requests to specific host names
    namedCertificates:
        - certPath: ""
          keyPath: ""
          names: []
    # SubjectAltNames added to API server certs
    subjectAltNames: []
    tls:
        # CipherSuites lists the allowed cipher suites that the API server will
        # accept and serve. Defaults to cipher suites from the minVersion config
        # parameter.
        cipherSuites: []
        # MinVersion specifies which TLS version is the minimum version of TLS
        # to serve from the API server. Allowed values: VersionTLS12, VersionTLS13.
        # Defaults to VersionTLS12.
        minVersion: VersionTLS12
debugging:
    # Valid values are: "Normal", "Debug", "Trace", "TraceAll".
    # Defaults to "Normal".
    logLevel: Normal
dns:
    # baseDomain is the base domain of the cluster. All managed DNS records will
    # be sub-domains of this base.

    # For example, given the base domain `example.com`, router exposed
    # domains will be formed as `*.apps.example.com` by default,
    # and API service will have a DNS entry for `api.example.com`,
    # as well as "api-int.example.com" for internal k8s API access.

    # Once set, this field cannot be changed.
    # example:
    #   microshift.example.com
    baseDomain: example.com
    # Hosts contains configuration for the hosts file.
    hosts:
        # File is the path to the hosts file to monitor.
        # If not specified, defaults to "/etc/hosts".
        # example:
        #   /etc/hosts
        file: /etc/hosts
        # Status controls whether the hosts file is enabled or disabled.
        # Allowed values are "Enabled" and "Disabled".
        # If not specified, defaults to "Disabled".
        # example:
        #   Enabled
        status: Disabled
etcd:
    # Set a memory limit on the etcd process; etcd will begin paging
    # memory when it gets to this value. 0 means no limit.
    memoryLimitMB: 0
genericDevicePlugin:
    # Devices configuration
    devices:
        - # Groups is a list of groups of devices that should be scheduled under the same name.
          groups:
            - # Count specifies how many times this group can be mounted concurrently.
              # When unspecified, Count defaults to 1.
              count: 1
              # 'paths' is the list of devices of which the device group consists.
              # Paths can be globs, in which case each device matched by the path will be schedulable `Count` times.
              # When the paths have differing cardinalities, that is, the globs match different numbers of devices,
              # the cardinality of each path is capped at the lowest cardinality.
              # 'paths' is exclusive with 'usbs'.
              paths:
                - # Limit specifies up to how many times this device can be used in the group concurrently when other devices
                  # in the group yield more matches.
                  # For example, if one path in the group matches 5 devices and another matches 1 device but has a limit of 10,
                  # then the group will provide 5 pairs of devices.
                  # When unspecified, Limit defaults to 1.
                  limit: 1
                  # MountPath is the file path at which the host device should be mounted within the container.
                  # When unspecified, MountPath defaults to the Path.
                  mountPath: /dev/ttyACM0
                  # Path is the file path of a device in the host.
                  path: /dev/ttyACM0
                  # Permissions is the file-system permissions given to the mounted device.
                  # Permissions apply only to mounts of type `Device`.
                  # This can be one or more of:
                  # * r - allows the container to read from the specified device.
                  # * w - allows the container to write to the specified device.
                  # * m - allows the container to create device files that do not yet exist.
                  # When unspecified, Permissions defaults to mrw.
                  permissions: mrw
                  # ReadOnly specifies whether the path should be mounted read-only.
                  # ReadOnly applies only to mounts of type `Mount`.
                  readOnly: false
                  # Type describes what type of file-system node this Path represents and thus how it should be mounted.
                  # Allowed values: "Device", "Mount". When unspecified, type defaults to Device.
                  type: Device
              # 'usbs' is the list of USB specifications that this device group consists of.
              # A USB device must match exactly on all the given attributes to pass.
              # 'usbs' is exclusive with 'paths'.
              usbs:
                - # Product is the USB Product ID of the device to match on.
                  # It should have the format "0x0123" or "0123".
                  product: ""
                  # Serial is the serial number of the device to match on.
                  # If specified, it must match exactly.
                  serial: ""
                  # Vendor is the USB Vendor ID of the device to match on.
                  # It should have the format "0x0123" or "0123".
                  vendor: ""
          # Name is a unique string representing the kind of device this specification describes.
          name: serial
    # Domain with which devices will be present in the cluster,
    # e.g. device.microshift.io/serial.
    domain: device.microshift.io
    # Generic Device Plugin status, can be Enabled or Disabled
    status: Disabled
ingress:
    # accessLogging describes how the client requests should be logged.
    accessLogging:
        # destination is where access logs go.
        destination:
            # container holds parameters for the Container logging destination.
            # Present only if type is Container.
            container:
                # maxLength is the maximum length of the log message.

                # Valid values are integers in the range 480 to 8192, inclusive.

                # When omitted, the default value is 1024.
                maxLength: 1024
            # syslog holds parameters for a syslog endpoint.  Present only if
            # type is Syslog.
            syslog:
                # address is the IP address of the syslog endpoint that receives log
                # messages.
                address: ""
                # facility specifies the syslog facility of log messages.

                # If this field is empty, the facility is "local1".
                facility: ""
                # maxLength is the maximum length of the log message.

                # Valid values are integers in the range 480 to 4096, inclusive.

                # When omitted, the default value is 1024.
                maxLength: 1024
                # port is the UDP port number of the syslog endpoint that receives log
                # messages.
                port: 0
            # type is the type of destination for logs.  It must be one of the
            # following:

            # * Container

            # The ingress operator configures the sidecar container named "logs" on
            # the ingress controller pod and configures the ingress controller to
            # write logs to the sidecar.  The logs are then available as container
            # logs.  The expectation is that the administrator configures a custom
            # logging solution that reads logs from this sidecar.  Note that using
            # container logs means that logs may be dropped if the rate of logs
            # exceeds the container runtime's or the custom logging solution's
            # capacity.

            # * Syslog

            # Logs are sent to a syslog endpoint.  The administrator must specify
            # an endpoint that can receive syslog messages.  The expectation is
            # that the administrator has configured a custom syslog instance.
            type: ""
        # httpCaptureCookies specifies HTTP cookies that should be captured in
        # access logs.  If this field is empty, no cookies are captured.
        httpCaptureCookies:
            - # matchType specifies the type of match to be performed on the cookie
              # name.  Allowed values are "Exact" for an exact string match and
              # "Prefix" for a string prefix match.  If "Exact" is specified, a name
              # must be specified in the name field.  If "Prefix" is provided, a
              # prefix must be specified in the namePrefix field.  For example,
              # specifying matchType "Prefix" and namePrefix "foo" will capture a
              # cookie named "foo" or "foobar" but not one named "bar".  The first
              # matching cookie is captured.
              matchType: ""
              # maxLength specifies a maximum length of the string that will be
              # logged, which includes the cookie name, cookie value, and
              # one-character delimiter.  If the log entry exceeds this length, the
              # value will be truncated in the log message.  Note that the ingress
              # controller may impose a separate bound on the total length of HTTP
              # headers in a request.
              maxLength: 0
              # name specifies a cookie name.  Its value must be a valid HTTP cookie
              # name as defined in RFC 6265 section 4.1.
              name: ""
              # namePrefix specifies a cookie name prefix.  Its value must be a valid
              # HTTP cookie name as defined in RFC 6265 section 4.1.
              namePrefix: ""
        # httpCaptureHeaders defines HTTP headers that should be captured in
        # access logs.  If this field is empty, no headers are captured.

        # Note that this option only applies to cleartext HTTP connections
        # and to secure HTTP connections for which the ingress controller
        # terminates encryption (that is, edge-terminated or reencrypt
        # connections).  Headers cannot be captured for TLS passthrough
        # connections.
        httpCaptureHeaders:
            # request specifies which HTTP request headers to capture.

            # If this field is empty, no request headers are captured.
            request:
                - # maxLength specifies a maximum length for the header value.  If a
                  # header value exceeds this length, the value will be truncated in the
                  # log message.  Note that the ingress controller may impose a separate
                  # bound on the total length of HTTP headers in a request.
                  maxLength: 0
                  # name specifies a header name.  Its value must be a valid HTTP header
                  # name as defined in RFC 2616 section 4.2.
                  name: ""
            # response specifies which HTTP response headers to capture.

            # If this field is empty, no response headers are captured.
            response:
                - # maxLength specifies a maximum length for the header value.  If a
                  # header value exceeds this length, the value will be truncated in the
                  # log message.  Note that the ingress controller may impose a separate
                  # bound on the total length of HTTP headers in a request.
                  maxLength: 0
                  # name specifies a header name.  Its value must be a valid HTTP header
                  # name as defined in RFC 2616 section 4.2.
                  name: ""
        # httpLogFormat specifies the format of the log message for an HTTP
        # request.

        # If this field is empty, log messages use the implementation's default
        # HTTP log format.  For HAProxy's default HTTP log format, see the
        # HAProxy documentation:
        # http://cbonte.github.io/haproxy-dconv/2.0/configuration.html#8.2.3

        # Note that this format only applies to cleartext HTTP connections
        # and to secure HTTP connections for which the ingress controller
        # terminates encryption (that is, edge-terminated or reencrypt
        # connections).  It does not affect the log format for TLS passthrough
        # connections.
        httpLogFormat: ""
        # Status of the access logging. If set to "Enabled", the router will
        # log all requests to the access log. If set to "Disabled", the router
        # will not log any requests to the access log.
        status: Disabled
    # ServingCertificateSecret references a kubernetes.io/tls type secret containing the TLS cert info for serving secure traffic.
    # The secret must exist in the openshift-ingress namespace and contain the following required fields:
    # - Secret.Data["tls.key"] - TLS private key.
    # - Secret.Data["tls.crt"] - TLS certificate.
    certificateSecret: router-certs-default
    # clientTLS specifies settings for requesting and verifying client
    # certificates, which can be used to enable mutual TLS for
    # edge-terminated and reencrypt routes.
    clientTLS:
        # allowedSubjectPatterns specifies a list of regular expressions that
        # should be matched against the distinguished name on a valid client
        # certificate to filter requests.  The regular expressions must use
        # PCRE syntax.  If this list is empty, no filtering is performed.  If
        # the list is nonempty, then at least one pattern must match a client
        # certificate's distinguished name or else the ingress controller
        # rejects the certificate and denies the connection.
        allowedSubjectPatterns: []
        # clientCA specifies a configmap containing the PEM-encoded CA
        # certificate bundle that should be used to verify a client's
        # certificate.  The administrator must create this configmap in the
        # openshift-config namespace.
        clientCA:
            # name is the metadata.name of the referenced config map
            name: ""
        # clientCertificatePolicy specifies whether the ingress controller
        # requires clients to provide certificates.  This field accepts the
        # values "Required" or "Optional".

        # Note that the ingress controller only checks client certificates for
        # edge-terminated and reencrypt TLS routes; it cannot check
        # certificates for cleartext HTTP or passthrough TLS routes.
        clientCertificatePolicy: ""
    # Determines default http version should be used for the ingress backends
    # By default,  using version 1.
    defaultHTTPVersion: 1
    # forwardedHeaderPolicy specifies when and how ingress router
    # sets the Forwarded, X-Forwarded-For, X-Forwarded-Host,
    # X-Forwarded-Port, X-Forwarded-Proto, and X-Forwarded-Proto-Version
    # HTTP headers.  The value may be one of the following:

    # * "Append", which specifies that ingress router appends the
    #   headers, preserving existing headers.

    # * "Replace", which specifies that ingress router sets the
    #   headers, replacing any existing Forwarded or X-Forwarded-* headers.

    # * "IfNone", which specifies that ingress router sets the
    #   headers if they are not already set.

    # * "Never", which specifies that ingress router never sets the
    #   headers, preserving any existing headers.

    # By default, the policy is "Append".
    forwardedHeaderPolicy: ""
    # httpCompression defines a policy for HTTP traffic compression.
    # By default, there is no HTTP compression.
    httpCompression:
        # mimeTypes is a list of MIME types that should have compression applied.
        # This list can be empty, in which case the ingress controller does not apply compression.

        # Note: Not all MIME types benefit from compression, but HAProxy will still use resources
        # to try to compress if instructed to.  Generally speaking, text (html, css, js, etc.)
        # formats benefit from compression, but formats that are already compressed (image,
        # audio, video, etc.) benefit little in exchange for the time and cpu spent on compressing
        # again. See https://joehonton.medium.com/the-gzip-penalty-d31bd697f1a2
        mimeTypes: []
    # httpEmptyRequestsPolicy describes how HTTP connections should be
    # handled if the connection times out before a request is received.
    # Allowed values for this field are "Respond" and "Ignore".  If the
    # field is set to "Respond", the ingress controller sends an HTTP 400
    # or 408 response, logs the connection (if access logging is enabled),
    # and counts the connection in the appropriate metrics.  If the field
    # is set to "Ignore", the ingress controller closes the connection
    # without sending a response, logging the connection, or incrementing
    # metrics.  The default value is "Respond".

    # Typically, these connections come from load balancers' health probes
    # or Web browsers' speculative connections ("preconnect") and can be
    # safely ignored.  However, these requests may also be caused by
    # network errors, and so setting this field to "Ignore" may impede
    # detection and diagnosis of problems.  In addition, these requests may
    # be caused by port scans, in which case logging empty requests may aid
    # in detecting intrusion attempts.
    httpEmptyRequestsPolicy: Respond
    # httpErrorCodePages specifies a configmap with custom error pages.
    # The administrator must create this configmap in the openshift-config namespace.
    # This configmap should have keys in the format "error-page-<error code>.http",
    # where <error code> is an HTTP error code.
    # For example, "error-page-503.http" defines an error page for HTTP 503 responses.
    # Currently only error pages for 503 and 404 responses can be customized.
    # Each value in the configmap should be the full response, including HTTP headers.
    # Eg- https://raw.githubusercontent.com/openshift/router/fadab45747a9b30cc3f0a4b41ad2871f95827a93/images/router/haproxy/conf/error-page-503.http
    # If this field is empty, the ingress controller uses the default error pages.
    httpErrorCodePages:
        # name is the metadata.name of the referenced config map
        name: ""
    # List of IP addresses and NIC names where the router will be listening. The NIC
    # names get translated to all their configured IPs dynamically. Defaults to the
    # configured IPs in the host at MicroShift start.
    listenAddress: []
    # logEmptyRequests specifies how connections on which no request is
    # received should be logged.  Typically, these empty requests come from
    # load balancers' health probes or Web browsers' speculative
    # connections ("preconnect"), in which case logging these requests may
    # be undesirable.  However, these requests may also be caused by
    # network errors, in which case logging empty requests may be useful
    # for diagnosing the errors.  In addition, these requests may be caused
    # by port scans, in which case logging empty requests may aid in
    # detecting intrusion attempts.  Allowed values for this field are
    # "Log" and "Ignore".  The default value is "Log".
    logEmptyRequests: Log
    ports:
        # Default router http port. Must be in range 1-65535.
        http: 80
        # Default router https port. Must be in range 1-65535.
        https: 443
    routeAdmissionPolicy:
        # Describes how host name claims across namespaces should be handled.

        # Value must be one of:

        # - Strict: Do not allow routes in different namespaces to claim the same host.

        # - InterNamespaceAllowed: Allow routes to claim different paths of the same
        #   host name across namespaces.

        # If empty, the default is InterNamespaceAllowed.
        namespaceOwnership: InterNamespaceAllowed
        # wildcardPolicy describes how routes with wildcard policies should
        # be handled for the ingress controller. WildcardPolicy controls use
        # of routes [1] exposed by the ingress controller based on the route's
        # wildcard policy.

        # [1] https://github.com/openshift/api/blob/master/route/v1/types.go

        # Note: Updating WildcardPolicy from WildcardsAllowed to WildcardsDisallowed
        # will cause admitted routes with a wildcard policy of Subdomain to stop
        # working. These routes must be updated to a wildcard policy of None to be
        # readmitted by the ingress controller.

        # WildcardPolicy supports WildcardsAllowed and WildcardsDisallowed values.

        # If empty, defaults to "WildcardsDisallowed".
        wildcardPolicy: ""
    # Default router status, can be Managed or Removed.
    status: Managed
    # tlsSecurityProfile specifies settings for TLS connections for ingresscontrollers.

    # If unset, the default is based on the apiservers.config.openshift.io/cluster resource.

    # Note that when using the Old, Intermediate, and Modern profile types, the effective
    # profile configuration is subject to change between releases. For example, given
    # a specification to use the Intermediate profile deployed on release X.Y.Z, an upgrade
    # to release X.Y.Z+1 may cause a new profile configuration to be applied to the ingress
    # controller, resulting in a rollout.
    tlsSecurityProfile:
        # custom is a user-defined TLS security profile. Be extremely careful using a custom
        # profile as invalid configurations can be catastrophic. An example custom profile
        # looks like this:

        #   ciphers:

        #     - ECDHE-ECDSA-CHACHA20-POLY1305

        #     - ECDHE-RSA-CHACHA20-POLY1305

        #     - ECDHE-RSA-AES128-GCM-SHA256

        #     - ECDHE-ECDSA-AES128-GCM-SHA256

        #   minTLSVersion: VersionTLS11
        custom:
            # ciphers is used to specify the cipher algorithms that are negotiated
            # during the TLS handshake.  Operators may remove entries their operands
            # do not support.  For example, to use DES-CBC3-SHA  (yaml):

            #   ciphers:
            #     - DES-CBC3-SHA
            ciphers: []
            # minTLSVersion is used to specify the minimal version of the TLS protocol
            # that is negotiated during the TLS handshake. For example, to use TLS
            # versions 1.1, 1.2 and 1.3 (yaml):

            #   minTLSVersion: VersionTLS11

            # NOTE: currently the highest minTLSVersion allowed is VersionTLS12
            minTLSVersion: ""
        # intermediate is a TLS security profile based on:

        # https://wiki.mozilla.org/Security/Server_Side_TLS#Intermediate_compatibility_.28recommended.29

        # and looks like this (yaml):

        #   ciphers:

        #     - TLS_AES_128_GCM_SHA256

        #     - TLS_AES_256_GCM_SHA384

        #     - TLS_CHACHA20_POLY1305_SHA256

        #     - ECDHE-ECDSA-AES128-GCM-SHA256

        #     - ECDHE-RSA-AES128-GCM-SHA256

        #     - ECDHE-ECDSA-AES256-GCM-SHA384

        #     - ECDHE-RSA-AES256-GCM-SHA384

        #     - ECDHE-ECDSA-CHACHA20-POLY1305

        #     - ECDHE-RSA-CHACHA20-POLY1305

        #     - DHE-RSA-AES128-GCM-SHA256

        #     - DHE-RSA-AES256-GCM-SHA384

        #   minTLSVersion: VersionTLS12
        intermediate: {}
        # modern is a TLS security profile based on:

        # https://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility

        # and looks like this (yaml):

        #   ciphers:

        #     - TLS_AES_128_GCM_SHA256

        #     - TLS_AES_256_GCM_SHA384

        #     - TLS_CHACHA20_POLY1305_SHA256

        #   minTLSVersion: VersionTLS13
        modern: {}
        # old is a TLS security profile based on:

        # https://wiki.mozilla.org/Security/Server_Side_TLS#Old_backward_compatibility

        # and looks like this (yaml):

        #   ciphers:

        #     - TLS_AES_128_GCM_SHA256

        #     - TLS_AES_256_GCM_SHA384

        #     - TLS_CHACHA20_POLY1305_SHA256

        #     - ECDHE-ECDSA-AES128-GCM-SHA256

        #     - ECDHE-RSA-AES128-GCM-SHA256

        #     - ECDHE-ECDSA-AES256-GCM-SHA384

        #     - ECDHE-RSA-AES256-GCM-SHA384

        #     - ECDHE-ECDSA-CHACHA20-POLY1305

        #     - ECDHE-RSA-CHACHA20-POLY1305

        #     - DHE-RSA-AES128-GCM-SHA256

        #     - DHE-RSA-AES256-GCM-SHA384

        #     - DHE-RSA-CHACHA20-POLY1305

        #     - ECDHE-ECDSA-AES128-SHA256

        #     - ECDHE-RSA-AES128-SHA256

        #     - ECDHE-ECDSA-AES128-SHA

        #     - ECDHE-RSA-AES128-SHA

        #     - ECDHE-ECDSA-AES256-SHA384

        #     - ECDHE-RSA-AES256-SHA384

        #     - ECDHE-ECDSA-AES256-SHA

        #     - ECDHE-RSA-AES256-SHA

        #     - DHE-RSA-AES128-SHA256

        #     - DHE-RSA-AES256-SHA256

        #     - AES128-GCM-SHA256

        #     - AES256-GCM-SHA384

        #     - AES128-SHA256

        #     - AES256-SHA256

        #     - AES128-SHA

        #     - AES256-SHA

        #     - DES-CBC3-SHA

        #   minTLSVersion: VersionTLS10
        old: {}
        # type is one of Old, Intermediate, Modern or Custom. Custom provides
        # the ability to specify individual TLS security profile parameters.
        # Old, Intermediate and Modern are TLS security profiles based on:

        # https://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_configurations

        # The profiles are intent based, so they may change over time as new ciphers are developed and existing ciphers
        # are found to be insecure.  Depending on precisely which ciphers are available to a process, the list may be
        # reduced.

        # Note that the Modern profile is currently not supported because it is not
        # yet well adopted by common software libraries.
        type: ""
    # IngressControllerTuningOptions specifies options for tuning the performance
    # of ingress controller pods
    tuningOptions:
        # clientFinTimeout defines how long a connection will be held open while
        # waiting for the client response to the server/backend closing the
        # connection.

        # If unset, the default timeout is 1s
        clientFinTimeout: 1s
        # clientTimeout defines how long a connection will be held open while
        # waiting for a client response.

        # If unset, the default timeout is 30s
        clientTimeout: 30s
        # headerBufferBytes describes how much memory should be reserved
        # (in bytes) for IngressController connection sessions.
        # Note that this value must be at least 16384 if HTTP/2 is
        # enabled for the IngressController (https://tools.ietf.org/html/rfc7540).
        # If this field is empty, the IngressController will use a default value
        # of 32768 bytes.

        # Setting this field is generally not recommended as headerBufferBytes
        # values that are too small may break the IngressController and
        # headerBufferBytes values that are too large could cause the
        # IngressController to use significantly more memory than necessary.
        headerBufferBytes: 0
        # headerBufferMaxRewriteBytes describes how much memory should be reserved
        # (in bytes) from headerBufferBytes for HTTP header rewriting
        # and appending for IngressController connection sessions.
        # Note that incoming HTTP requests will be limited to
        # (headerBufferBytes - headerBufferMaxRewriteBytes) bytes, meaning
        # headerBufferBytes must be greater than headerBufferMaxRewriteBytes.
        # If this field is empty, the IngressController will use a default value
        # of 8192 bytes.

        # Setting this field is generally not recommended as
        # headerBufferMaxRewriteBytes values that are too small may break the
        # IngressController and headerBufferMaxRewriteBytes values that are too
        # large could cause the IngressController to use significantly more memory
        # than necessary.
        headerBufferMaxRewriteBytes: 0
        # healthCheckInterval defines how long the router waits between two consecutive
        # health checks on its configured backends.  This value is applied globally as
        # a default for all routes, but may be overridden per-route by the route annotation
        # "router.openshift.io/haproxy.health.check.interval".

        # Expects an unsigned duration string of decimal numbers, each with optional
        # fraction and a unit suffix, eg "300ms", "1.5h" or "2h45m".
        # Valid time units are "ns", "us" (or "µs" U+00B5 or "μs" U+03BC), "ms", "s", "m", "h".

        # Setting this to less than 5s can cause excess traffic due to too frequent
        # TCP health checks and accompanying SYN packet storms.  Alternatively, setting
        # this too high can result in increased latency, due to backend servers that are no
        # longer available, but haven't yet been detected as such.

        # An empty or zero healthCheckInterval means no opinion and IngressController chooses
        # a default, which is subject to change over time.
        # Currently the default healthCheckInterval value is 5s.

        # Currently the minimum allowed value is 1s and the maximum allowed value is
        # 2147483647ms (24.85 days).  Both are subject to change over time.
        healthCheckInterval: 5s
        # maxConnections defines the maximum number of simultaneous
        # connections that can be established per HAProxy process.
        # Increasing this value allows each ingress controller pod to
        # handle more connections but at the cost of additional
        # system resources being consumed.

        # Permitted values are: empty, 0, -1, and the range
        # 2000-2000000.

        # If this field is empty or 0, the IngressController will use
        # the default value of 50000, but the default is subject to
        # change in future releases.

        # If the value is -1 then HAProxy will dynamically compute a
        # maximum value based on the available ulimits in the running
        # container. Selecting -1 (i.e., auto) will result in a large
        # value being computed (~520000 on OpenShift >=4.10 clusters)
        # and therefore each HAProxy process will incur significant
        # memory usage compared to the current default of 50000.

        # Setting a value that is greater than the current operating
        # system limit will prevent the HAProxy process from
        # starting.

        # If you choose a discrete value (e.g., 750000) and the
        # router pod is migrated to a new node, there's no guarantee
        # that new node has identical ulimits configured. In
        # such a scenario the pod would fail to start. If you have
        # nodes with different ulimits configured (e.g., different
        # tuned profiles) and you choose a discrete value then the
        # guidance is to use -1 and let the value be computed
        # dynamically at runtime.

        # You can monitor memory usage for router containers with the
        # following metric:
        # 'container_memory_working_set_bytes{container="router",namespace="openshift-ingress"}'.

        # You can monitor memory usage of individual HAProxy
        # processes in router containers with the following metric:
        # 'container_memory_working_set_bytes{container="router",namespace="openshift-ingress"}/container_processes{container="router",namespace="openshift-ingress"}'.
        maxConnections: 0
        # serverFinTimeout defines how long a connection will be held open while
        # waiting for the server/backend response to the client closing the
        # connection.

        # If unset, the default timeout is 1s
        serverFinTimeout: 1s
        # serverTimeout defines how long a connection will be held open while
        # waiting for a server/backend response.

        # If unset, the default timeout is 30s
        serverTimeout: 30s
        # threadCount defines the number of threads created per HAProxy process.
        # Creating more threads allows each ingress controller pod to handle more
        # connections, at the cost of more system resources being used. HAProxy
        # currently supports up to 64 threads. If this field is empty, the
        # IngressController will use the default value.  The current default is 4
        # threads, but this may change in future releases.

        # Setting this field is generally not recommended. Increasing the number
        # of HAProxy threads allows ingress controller pods to utilize more CPU
        # time under load, potentially starving other pods if set too high.
        # Reducing the number of threads may cause the ingress controller to
        # perform poorly.
        threadCount: 0
        # tlsInspectDelay defines how long the router can hold data to find a
        # matching route.

        # Setting this too short can cause the router to fall back to the default
        # certificate for edge-terminated or reencrypt routes even when a better
        # matching certificate could be used.

        # If unset, the default inspect delay is 5s
        tlsInspectDelay: 5s
        # tunnelTimeout defines how long a tunnel connection (including
        # websockets) will be held open while the tunnel is idle.

        # If unset, the default timeout is 1h
        tunnelTimeout: 1h
# Settings specified in this section are transferred as-is into the Kubelet config.
kubelet:
manifests:
    # The locations on the filesystem to scan for kustomization
    # files to use to load manifests. Set to a list of paths to scan
    # only those paths. Set to an empty list to disable loading
    # manifests. The entries in the list can be glob patterns to
    # match multiple subdirectories.
    kustomizePaths:
        - /usr/lib/microshift/manifests
        - /usr/lib/microshift/manifests.d/*
        - /etc/microshift/manifests
        - /etc/microshift/manifests.d/*
network:
    # IP address pool to use for pod IPs.
    # This field is immutable after installation.
    clusterNetwork:
        - 10.42.0.0/16
    # CNIPlugin is a user defined string value matching one of the above CNI values. MicroShift uses this
    # value to decide whether to deploy the OVN-K as default CNI. An unset field defaults to "" during yaml parsing, and thus
    # could mean that the cluster has been upgraded. In order to support the existing out-of-box behavior, MicroShift
    # assumes an empty string to mean the OVN-K should be deployed.
    # Allowed values are: unset or one of ["", "ovnk", "none"]
    cniPlugin: ""
    multus:
        # Status controls the deployment of the Multus CNI.
        # Changing from "Enabled" to "Disabled" will not cause Multus CNI to be deleted.
        # Allowed values are: unset (disabled), "Enabled", or "Disabled"
        status: Disabled
    # IP address pool for services.
    # Currently, we only support a single entry here.
    # This field is immutable after installation.
    serviceNetwork:
        - 10.43.0.0/16
    # The port range allowed for Services of type NodePort.
    # If not specified, the default of 30000-32767 will be used.
    # Such Services without a NodePort specified will have one
    # automatically allocated from this range.
    # This parameter can be updated after the cluster is
    # installed.
    serviceNodePortRange: 30000-32767
node:
    # If non-empty, will use this string to identify the node instead of the hostname
    hostnameOverride: ""
    # IP address of the node, passed to the kubelet.
    # If not specified, kubelet will use the node's default IP address.
    nodeIP: ""
    # IPv6 address of the node, passed to the kubelet. This parameter
    # is only allowed when dual stack deployment is configured.
    nodeIPv6: ""
# Storage represents a subfield of the MicroShift config data structure. Its purpose to provide a user
# facing interface to control whether MicroShift should deploy LVMS on startup.
storage:
    # Driver is a user defined string value matching one of the above CSIStorageDriver values. MicroShift uses this
    # value to decide whether to deploy the LVMS operator. An unset field defaults to "" during yaml parsing, and thus
    # could mean that the cluster has been upgraded. In order to support the existing out-of-box behavior, MicroShift
    # assumes an empty string to mean the storage driver should be deployed.
    # Allowed values are: unset or one of ["", "lvms", "none"]
    driver: ""
    # OptionalCSIComponents is a user defined slice of CSIComponent values. These value tell MicroShift which
    # additional, non-driver, CSI controllers to deploy on start. MicroShift will deploy snapshot controller
    # when no components are specified. This preserves the current deployment behavior of existing
    # clusters. Users must set `.storage.optionalCsiComponents: []` to explicitly tell MicroShift not to deploy any CSI
    # components. The CSI Driver is excluded as it is typically deployed via the same manifest as the accompanying
    # storage driver. Like CSIStorageDriver, uninstallation is not supported as this can lead to orphaned storage
    # objects.
    # Allowed values are: unset, [], or one or more of ["snapshot-controller"]
    # example:
    #   - snapshot-controller
    optionalCsiComponents: []
telemetry:
    # Endpoint where to send telemetry data.
    endpoint: https://infogw.api.openshift.com/metrics/v1/receive
    # HTTP proxy to use exclusively for telemetry data. If unset telemetry will
    # default to use the system configured proxy.
    proxy: ""
    # Telemetry status, which can be Enabled or Disabled. Defaults to Enabled.
    status: Enabled

