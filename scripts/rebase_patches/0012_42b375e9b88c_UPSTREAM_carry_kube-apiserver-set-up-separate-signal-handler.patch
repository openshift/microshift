diff --git a/vendor/k8s.io/apiserver/pkg/server/signal.go b/vendor/k8s.io/apiserver/pkg/server/signal.go
index 89cc4ce8f6b..bdd2728f8ab 100644
--- a/vendor/k8s.io/apiserver/pkg/server/signal.go
+++ b/vendor/k8s.io/apiserver/pkg/server/signal.go
@@ -32,14 +32,30 @@ var shutdownHandler chan os.Signal
 // is terminated with exit code 1.
 // Only one of SetupSignalContext and SetupSignalHandler should be called, and only can
 // be called once.
-func SetupSignalHandler(exitOnSecondSignal bool) <-chan struct{} {
-	return SetupSignalContext(exitOnSecondSignal).Done()
+func SetupSignalHandler() <-chan struct{} {
+	return SetupSignalContext().Done()
+}
+
+// SetupSignalHandlerIgnoringFurtherSignals is the same as SetupSignalContext, except
+// it ignores further exit signals after receiving the first one.
+func SetupSignalHandlerIgnoringFurtherSignals() <-chan struct{} {
+	return SetupSignalContextNotExiting().Done()
 }
 
 // SetupSignalContext is same as SetupSignalHandler, but a context.Context is returned.
 // Only one of SetupSignalContext and SetupSignalHandler should be called, and only can
 // be called once.
-func SetupSignalContext(exitOnSecondSignal bool) context.Context {
+func SetupSignalContext() context.Context {
+	return setupSignalContext(true)
+}
+
+// SetupSignalContextNotExiting is the same as SetupSignalContext, except
+// it ignores further exit signals after receiving the first one.
+func SetupSignalContextNotExiting() context.Context {
+	return setupSignalContext(false)
+}
+
+func setupSignalContext(exitOnSecondSignal bool) context.Context {
 	close(onlyOneSignalHandler) // panics when called twice
 
 	shutdownHandler = make(chan os.Signal, 2)
