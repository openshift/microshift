// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	data "github.com/openshift/microshift/pkg/admin/data"
	mock "github.com/stretchr/testify/mock"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

type Manager_Expecter struct {
	mock *mock.Mock
}

func (_m *Manager) EXPECT() *Manager_Expecter {
	return &Manager_Expecter{mock: &_m.Mock}
}

// Backup provides a mock function with given fields: _a0
func (_m *Manager) Backup(_a0 data.BackupName) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(data.BackupName) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Manager_Backup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Backup'
type Manager_Backup_Call struct {
	*mock.Call
}

// Backup is a helper method to define mock.On call
//   - _a0 data.BackupName
func (_e *Manager_Expecter) Backup(_a0 interface{}) *Manager_Backup_Call {
	return &Manager_Backup_Call{Call: _e.mock.On("Backup", _a0)}
}

func (_c *Manager_Backup_Call) Run(run func(_a0 data.BackupName)) *Manager_Backup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(data.BackupName))
	})
	return _c
}

func (_c *Manager_Backup_Call) Return(_a0 error) *Manager_Backup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_Backup_Call) RunAndReturn(run func(data.BackupName) error) *Manager_Backup_Call {
	_c.Call.Return(run)
	return _c
}

// BackupExists provides a mock function with given fields: _a0
func (_m *Manager) BackupExists(_a0 data.BackupName) (bool, error) {
	ret := _m.Called(_a0)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(data.BackupName) (bool, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(data.BackupName) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(data.BackupName) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Manager_BackupExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BackupExists'
type Manager_BackupExists_Call struct {
	*mock.Call
}

// BackupExists is a helper method to define mock.On call
//   - _a0 data.BackupName
func (_e *Manager_Expecter) BackupExists(_a0 interface{}) *Manager_BackupExists_Call {
	return &Manager_BackupExists_Call{Call: _e.mock.On("BackupExists", _a0)}
}

func (_c *Manager_BackupExists_Call) Run(run func(_a0 data.BackupName)) *Manager_BackupExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(data.BackupName))
	})
	return _c
}

func (_c *Manager_BackupExists_Call) Return(_a0 bool, _a1 error) *Manager_BackupExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Manager_BackupExists_Call) RunAndReturn(run func(data.BackupName) (bool, error)) *Manager_BackupExists_Call {
	_c.Call.Return(run)
	return _c
}

// GetBackupList provides a mock function with given fields:
func (_m *Manager) GetBackupList() ([]data.BackupName, error) {
	ret := _m.Called()

	var r0 []data.BackupName
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]data.BackupName, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []data.BackupName); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]data.BackupName)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Manager_GetBackupList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackupList'
type Manager_GetBackupList_Call struct {
	*mock.Call
}

// GetBackupList is a helper method to define mock.On call
func (_e *Manager_Expecter) GetBackupList() *Manager_GetBackupList_Call {
	return &Manager_GetBackupList_Call{Call: _e.mock.On("GetBackupList")}
}

func (_c *Manager_GetBackupList_Call) Run(run func()) *Manager_GetBackupList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Manager_GetBackupList_Call) Return(_a0 []data.BackupName, _a1 error) *Manager_GetBackupList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Manager_GetBackupList_Call) RunAndReturn(run func() ([]data.BackupName, error)) *Manager_GetBackupList_Call {
	_c.Call.Return(run)
	return _c
}

// GetBackupPath provides a mock function with given fields: _a0
func (_m *Manager) GetBackupPath(_a0 data.BackupName) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(data.BackupName) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Manager_GetBackupPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackupPath'
type Manager_GetBackupPath_Call struct {
	*mock.Call
}

// GetBackupPath is a helper method to define mock.On call
//   - _a0 data.BackupName
func (_e *Manager_Expecter) GetBackupPath(_a0 interface{}) *Manager_GetBackupPath_Call {
	return &Manager_GetBackupPath_Call{Call: _e.mock.On("GetBackupPath", _a0)}
}

func (_c *Manager_GetBackupPath_Call) Run(run func(_a0 data.BackupName)) *Manager_GetBackupPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(data.BackupName))
	})
	return _c
}

func (_c *Manager_GetBackupPath_Call) Return(_a0 string) *Manager_GetBackupPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_GetBackupPath_Call) RunAndReturn(run func(data.BackupName) string) *Manager_GetBackupPath_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveBackup provides a mock function with given fields: _a0
func (_m *Manager) RemoveBackup(_a0 data.BackupName) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(data.BackupName) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Manager_RemoveBackup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveBackup'
type Manager_RemoveBackup_Call struct {
	*mock.Call
}

// RemoveBackup is a helper method to define mock.On call
//   - _a0 data.BackupName
func (_e *Manager_Expecter) RemoveBackup(_a0 interface{}) *Manager_RemoveBackup_Call {
	return &Manager_RemoveBackup_Call{Call: _e.mock.On("RemoveBackup", _a0)}
}

func (_c *Manager_RemoveBackup_Call) Run(run func(_a0 data.BackupName)) *Manager_RemoveBackup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(data.BackupName))
	})
	return _c
}

func (_c *Manager_RemoveBackup_Call) Return(_a0 error) *Manager_RemoveBackup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_RemoveBackup_Call) RunAndReturn(run func(data.BackupName) error) *Manager_RemoveBackup_Call {
	_c.Call.Return(run)
	return _c
}

// Restore provides a mock function with given fields: _a0
func (_m *Manager) Restore(_a0 data.BackupName) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(data.BackupName) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Manager_Restore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Restore'
type Manager_Restore_Call struct {
	*mock.Call
}

// Restore is a helper method to define mock.On call
//   - _a0 data.BackupName
func (_e *Manager_Expecter) Restore(_a0 interface{}) *Manager_Restore_Call {
	return &Manager_Restore_Call{Call: _e.mock.On("Restore", _a0)}
}

func (_c *Manager_Restore_Call) Run(run func(_a0 data.BackupName)) *Manager_Restore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(data.BackupName))
	})
	return _c
}

func (_c *Manager_Restore_Call) Return(_a0 error) *Manager_Restore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_Restore_Call) RunAndReturn(run func(data.BackupName) error) *Manager_Restore_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewManager(t mockConstructorTestingTNewManager) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
