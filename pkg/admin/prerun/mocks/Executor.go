// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	history "github.com/openshift/microshift/pkg/admin/history"
	mock "github.com/stretchr/testify/mock"
)

// Executor is an autogenerated mock type for the Executor type
type Executor struct {
	mock.Mock
}

type Executor_Expecter struct {
	mock *mock.Mock
}

func (_m *Executor) EXPECT() *Executor_Expecter {
	return &Executor_Expecter{mock: &_m.Mock}
}

// BackupPreviousBoot provides a mock function with given fields:
func (_m *Executor) BackupPreviousBoot() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Executor_BackupPreviousBoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BackupPreviousBoot'
type Executor_BackupPreviousBoot_Call struct {
	*mock.Call
}

// BackupPreviousBoot is a helper method to define mock.On call
func (_e *Executor_Expecter) BackupPreviousBoot() *Executor_BackupPreviousBoot_Call {
	return &Executor_BackupPreviousBoot_Call{Call: _e.mock.On("BackupPreviousBoot")}
}

func (_c *Executor_BackupPreviousBoot_Call) Run(run func()) *Executor_BackupPreviousBoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Executor_BackupPreviousBoot_Call) Return(_a0 error) *Executor_BackupPreviousBoot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Executor_BackupPreviousBoot_Call) RunAndReturn(run func() error) *Executor_BackupPreviousBoot_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePreRunStatus provides a mock function with given fields: _a0
func (_m *Executor) UpdatePreRunStatus(_a0 history.PreRunStatus) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(history.PreRunStatus) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Executor_UpdatePreRunStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePreRunStatus'
type Executor_UpdatePreRunStatus_Call struct {
	*mock.Call
}

// UpdatePreRunStatus is a helper method to define mock.On call
//   - _a0 history.PreRunStatus
func (_e *Executor_Expecter) UpdatePreRunStatus(_a0 interface{}) *Executor_UpdatePreRunStatus_Call {
	return &Executor_UpdatePreRunStatus_Call{Call: _e.mock.On("UpdatePreRunStatus", _a0)}
}

func (_c *Executor_UpdatePreRunStatus_Call) Run(run func(_a0 history.PreRunStatus)) *Executor_UpdatePreRunStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(history.PreRunStatus))
	})
	return _c
}

func (_c *Executor_UpdatePreRunStatus_Call) Return(_a0 error) *Executor_UpdatePreRunStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Executor_UpdatePreRunStatus_Call) RunAndReturn(run func(history.PreRunStatus) error) *Executor_UpdatePreRunStatus_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewExecutor interface {
	mock.TestingT
	Cleanup(func())
}

// NewExecutor creates a new instance of Executor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExecutor(t mockConstructorTestingTNewExecutor) *Executor {
	mock := &Executor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
