// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	history "github.com/openshift/microshift/pkg/admin/history"
	mock "github.com/stretchr/testify/mock"
)

// PreconditionsAdvisor is an autogenerated mock type for the PreconditionsAdvisor type
type PreconditionsAdvisor struct {
	mock.Mock
}

type PreconditionsAdvisor_Expecter struct {
	mock *mock.Mock
}

func (_m *PreconditionsAdvisor) EXPECT() *PreconditionsAdvisor_Expecter {
	return &PreconditionsAdvisor_Expecter{mock: &_m.Mock}
}

// IsOSTree provides a mock function with given fields:
func (_m *PreconditionsAdvisor) IsOSTree() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// PreconditionsAdvisor_IsOSTree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsOSTree'
type PreconditionsAdvisor_IsOSTree_Call struct {
	*mock.Call
}

// IsOSTree is a helper method to define mock.On call
func (_e *PreconditionsAdvisor_Expecter) IsOSTree() *PreconditionsAdvisor_IsOSTree_Call {
	return &PreconditionsAdvisor_IsOSTree_Call{Call: _e.mock.On("IsOSTree")}
}

func (_c *PreconditionsAdvisor_IsOSTree_Call) Run(run func()) *PreconditionsAdvisor_IsOSTree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PreconditionsAdvisor_IsOSTree_Call) Return(_a0 bool) *PreconditionsAdvisor_IsOSTree_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PreconditionsAdvisor_IsOSTree_Call) RunAndReturn(run func() bool) *PreconditionsAdvisor_IsOSTree_Call {
	_c.Call.Return(run)
	return _c
}

// PreRunAlreadyRanCurrentBoot provides a mock function with given fields:
func (_m *PreconditionsAdvisor) PreRunAlreadyRanCurrentBoot() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// PreconditionsAdvisor_PreRunAlreadyRanCurrentBoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreRunAlreadyRanCurrentBoot'
type PreconditionsAdvisor_PreRunAlreadyRanCurrentBoot_Call struct {
	*mock.Call
}

// PreRunAlreadyRanCurrentBoot is a helper method to define mock.On call
func (_e *PreconditionsAdvisor_Expecter) PreRunAlreadyRanCurrentBoot() *PreconditionsAdvisor_PreRunAlreadyRanCurrentBoot_Call {
	return &PreconditionsAdvisor_PreRunAlreadyRanCurrentBoot_Call{Call: _e.mock.On("PreRunAlreadyRanCurrentBoot")}
}

func (_c *PreconditionsAdvisor_PreRunAlreadyRanCurrentBoot_Call) Run(run func()) *PreconditionsAdvisor_PreRunAlreadyRanCurrentBoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PreconditionsAdvisor_PreRunAlreadyRanCurrentBoot_Call) Return(_a0 bool) *PreconditionsAdvisor_PreRunAlreadyRanCurrentBoot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PreconditionsAdvisor_PreRunAlreadyRanCurrentBoot_Call) RunAndReturn(run func() bool) *PreconditionsAdvisor_PreRunAlreadyRanCurrentBoot_Call {
	_c.Call.Return(run)
	return _c
}

// PreRunStatus provides a mock function with given fields:
func (_m *PreconditionsAdvisor) PreRunStatus() history.PreRunStatus {
	ret := _m.Called()

	var r0 history.PreRunStatus
	if rf, ok := ret.Get(0).(func() history.PreRunStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(history.PreRunStatus)
	}

	return r0
}

// PreconditionsAdvisor_PreRunStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreRunStatus'
type PreconditionsAdvisor_PreRunStatus_Call struct {
	*mock.Call
}

// PreRunStatus is a helper method to define mock.On call
func (_e *PreconditionsAdvisor_Expecter) PreRunStatus() *PreconditionsAdvisor_PreRunStatus_Call {
	return &PreconditionsAdvisor_PreRunStatus_Call{Call: _e.mock.On("PreRunStatus")}
}

func (_c *PreconditionsAdvisor_PreRunStatus_Call) Run(run func()) *PreconditionsAdvisor_PreRunStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PreconditionsAdvisor_PreRunStatus_Call) Return(_a0 history.PreRunStatus) *PreconditionsAdvisor_PreRunStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PreconditionsAdvisor_PreRunStatus_Call) RunAndReturn(run func() history.PreRunStatus) *PreconditionsAdvisor_PreRunStatus_Call {
	_c.Call.Return(run)
	return _c
}

// PreRunWasSuccessful provides a mock function with given fields:
func (_m *PreconditionsAdvisor) PreRunWasSuccessful() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// PreconditionsAdvisor_PreRunWasSuccessful_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreRunWasSuccessful'
type PreconditionsAdvisor_PreRunWasSuccessful_Call struct {
	*mock.Call
}

// PreRunWasSuccessful is a helper method to define mock.On call
func (_e *PreconditionsAdvisor_Expecter) PreRunWasSuccessful() *PreconditionsAdvisor_PreRunWasSuccessful_Call {
	return &PreconditionsAdvisor_PreRunWasSuccessful_Call{Call: _e.mock.On("PreRunWasSuccessful")}
}

func (_c *PreconditionsAdvisor_PreRunWasSuccessful_Call) Run(run func()) *PreconditionsAdvisor_PreRunWasSuccessful_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PreconditionsAdvisor_PreRunWasSuccessful_Call) Return(_a0 bool) *PreconditionsAdvisor_PreRunWasSuccessful_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PreconditionsAdvisor_PreRunWasSuccessful_Call) RunAndReturn(run func() bool) *PreconditionsAdvisor_PreRunWasSuccessful_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewPreconditionsAdvisor interface {
	mock.TestingT
	Cleanup(func())
}

// NewPreconditionsAdvisor creates a new instance of PreconditionsAdvisor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPreconditionsAdvisor(t mockConstructorTestingTNewPreconditionsAdvisor) *PreconditionsAdvisor {
	mock := &PreconditionsAdvisor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
