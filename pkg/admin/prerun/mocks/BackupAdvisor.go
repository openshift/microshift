// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// BackupAdvisor is an autogenerated mock type for the BackupAdvisor type
type BackupAdvisor struct {
	mock.Mock
}

type BackupAdvisor_Expecter struct {
	mock *mock.Mock
}

func (_m *BackupAdvisor) EXPECT() *BackupAdvisor_Expecter {
	return &BackupAdvisor_Expecter{mock: &_m.Mock}
}

// BootHistoryContainsPreviousBoot provides a mock function with given fields:
func (_m *BackupAdvisor) BootHistoryContainsPreviousBoot() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// BackupAdvisor_BootHistoryContainsPreviousBoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BootHistoryContainsPreviousBoot'
type BackupAdvisor_BootHistoryContainsPreviousBoot_Call struct {
	*mock.Call
}

// BootHistoryContainsPreviousBoot is a helper method to define mock.On call
func (_e *BackupAdvisor_Expecter) BootHistoryContainsPreviousBoot() *BackupAdvisor_BootHistoryContainsPreviousBoot_Call {
	return &BackupAdvisor_BootHistoryContainsPreviousBoot_Call{Call: _e.mock.On("BootHistoryContainsPreviousBoot")}
}

func (_c *BackupAdvisor_BootHistoryContainsPreviousBoot_Call) Run(run func()) *BackupAdvisor_BootHistoryContainsPreviousBoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BackupAdvisor_BootHistoryContainsPreviousBoot_Call) Return(_a0 bool) *BackupAdvisor_BootHistoryContainsPreviousBoot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BackupAdvisor_BootHistoryContainsPreviousBoot_Call) RunAndReturn(run func() bool) *BackupAdvisor_BootHistoryContainsPreviousBoot_Call {
	_c.Call.Return(run)
	return _c
}

// BootHistoryExists provides a mock function with given fields:
func (_m *BackupAdvisor) BootHistoryExists() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// BackupAdvisor_BootHistoryExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BootHistoryExists'
type BackupAdvisor_BootHistoryExists_Call struct {
	*mock.Call
}

// BootHistoryExists is a helper method to define mock.On call
func (_e *BackupAdvisor_Expecter) BootHistoryExists() *BackupAdvisor_BootHistoryExists_Call {
	return &BackupAdvisor_BootHistoryExists_Call{Call: _e.mock.On("BootHistoryExists")}
}

func (_c *BackupAdvisor_BootHistoryExists_Call) Run(run func()) *BackupAdvisor_BootHistoryExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BackupAdvisor_BootHistoryExists_Call) Return(_a0 bool) *BackupAdvisor_BootHistoryExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BackupAdvisor_BootHistoryExists_Call) RunAndReturn(run func() bool) *BackupAdvisor_BootHistoryExists_Call {
	_c.Call.Return(run)
	return _c
}

// DeviceBootedForTheFirstTime provides a mock function with given fields:
func (_m *BackupAdvisor) DeviceBootedForTheFirstTime() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// BackupAdvisor_DeviceBootedForTheFirstTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeviceBootedForTheFirstTime'
type BackupAdvisor_DeviceBootedForTheFirstTime_Call struct {
	*mock.Call
}

// DeviceBootedForTheFirstTime is a helper method to define mock.On call
func (_e *BackupAdvisor_Expecter) DeviceBootedForTheFirstTime() *BackupAdvisor_DeviceBootedForTheFirstTime_Call {
	return &BackupAdvisor_DeviceBootedForTheFirstTime_Call{Call: _e.mock.On("DeviceBootedForTheFirstTime")}
}

func (_c *BackupAdvisor_DeviceBootedForTheFirstTime_Call) Run(run func()) *BackupAdvisor_DeviceBootedForTheFirstTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BackupAdvisor_DeviceBootedForTheFirstTime_Call) Return(_a0 bool) *BackupAdvisor_DeviceBootedForTheFirstTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BackupAdvisor_DeviceBootedForTheFirstTime_Call) RunAndReturn(run func() bool) *BackupAdvisor_DeviceBootedForTheFirstTime_Call {
	_c.Call.Return(run)
	return _c
}

// PreviousBootWasHealthy provides a mock function with given fields:
func (_m *BackupAdvisor) PreviousBootWasHealthy() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// BackupAdvisor_PreviousBootWasHealthy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreviousBootWasHealthy'
type BackupAdvisor_PreviousBootWasHealthy_Call struct {
	*mock.Call
}

// PreviousBootWasHealthy is a helper method to define mock.On call
func (_e *BackupAdvisor_Expecter) PreviousBootWasHealthy() *BackupAdvisor_PreviousBootWasHealthy_Call {
	return &BackupAdvisor_PreviousBootWasHealthy_Call{Call: _e.mock.On("PreviousBootWasHealthy")}
}

func (_c *BackupAdvisor_PreviousBootWasHealthy_Call) Run(run func()) *BackupAdvisor_PreviousBootWasHealthy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BackupAdvisor_PreviousBootWasHealthy_Call) Return(_a0 bool) *BackupAdvisor_PreviousBootWasHealthy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BackupAdvisor_PreviousBootWasHealthy_Call) RunAndReturn(run func() bool) *BackupAdvisor_PreviousBootWasHealthy_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewBackupAdvisor interface {
	mock.TestingT
	Cleanup(func())
}

// NewBackupAdvisor creates a new instance of BackupAdvisor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBackupAdvisor(t mockConstructorTestingTNewBackupAdvisor) *BackupAdvisor {
	mock := &BackupAdvisor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
